// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * This chip implements the complete address space of the 
 * computer's data memory, including RAM and memory mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: If load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load == 1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output in the next time step.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000 to 0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    DMux4Way(in=in[0], a=ram16in0, b=ram16ain0, c=screenin0, sel=address[13..14]);
    DMux4Way(in=in[1], a=ram16in1, b=ram16ain1, c=screenin1, sel=address[13..14]);
    DMux4Way(in=in[2], a=ram16in2, b=ram16ain2, c=screenin2, sel=address[13..14]);
    DMux4Way(in=in[3], a=ram16in3, b=ram16ain3, c=screenin3, sel=address[13..14]);
    DMux4Way(in=in[4], a=ram16in4, b=ram16ain4, c=screenin4, sel=address[13..14]);
    DMux4Way(in=in[5], a=ram16in5, b=ram16ain5, c=screenin5, sel=address[13..14]);
    DMux4Way(in=in[6], a=ram16in6, b=ram16ain6, c=screenin6, sel=address[13..14]);
    DMux4Way(in=in[7], a=ram16in7, b=ram16ain7, c=screenin7, sel=address[13..14]);
    DMux4Way(in=in[8], a=ram16in8, b=ram16ain8, c=screenin8, sel=address[13..14]);
    DMux4Way(in=in[9], a=ram16in9, b=ram16ain9, c=screenin9, sel=address[13..14]);
    DMux4Way(in=in[10], a=ram16in10, b=ram16ain10, c=screenin10, sel=address[13..14]);
    DMux4Way(in=in[11], a=ram16in11, b=ram16ain11, c=screenin11, sel=address[13..14]);
    DMux4Way(in=in[12], a=ram16in12, b=ram16ain12, c=screenin12, sel=address[13..14]);
    DMux4Way(in=in[13], a=ram16in13, b=ram16ain13, c=screenin13, sel=address[13..14]);
    DMux4Way(in=in[14], a=ram16in14, b=ram16ain14, c=screenin14, sel=address[13..14]);
    DMux4Way(in=in[15], a=ram16in15, b=ram16ain15, c=screenin15, sel=address[13..14]);
    DMux4Way(in=load, a=loadram16, b=loadram16a, c=loadscreen, sel=address[13..14]);

    Mux16(a[0]=ram16in0, a[1]=ram16in1, a[2]=ram16in2, a[3]=ram16in3, a[4]=ram16in4, a[5]=ram16in5, a[6]=ram16in6, a[7]=ram16in7, a[8]=ram16in8, a[9]=ram16in9, a[10]=ram16in10, a[11]=ram16in11, a[12]=ram16in12, a[13]=ram16in13, a[14]=ram16in14, a[15]=ram16in15, b[0]=ram16ain0, b[1]=ram16ain1, b[2]=ram16ain2, b[3]=ram16ain3, b[4]=ram16ain4, b[5]=ram16ain5, b[6]=ram16ain6, b[7]=ram16ain7, b[8]=ram16ain8, b[9]=ram16ain9, b[10]=ram16ain10, b[11]=ram16ain11, b[12]=ram16ain12, b[13]=ram16ain13, b[14]=ram16ain14, b[15]=ram16ain15, sel=address[13], out=ram16recombined);

    Or(a=loadram16, b=loadram16a, out=shouldloadram);

    RAM16K(in=ram16recombined, out=ram16out, load=shouldloadram, address=address[0..13]);
    
    Screen(in[0]=screenin0, in[1]=screenin1, in[2]=screenin2, in[3]=screenin3, in[4]=screenin4, in[5]=screenin5, in[6]=screenin6, in[7]=screenin7, in[8]=screenin8, in[9]=screenin9, in[10]=screenin10, in[11]=screenin11, in[12]=screenin12, in[13]=screenin13, in[14]=screenin14, in[15]=screenin15, out=screenout, load=loadscreen, address=address[0..12]);
    Keyboard(out=keybout);

    Mux4Way16(a=ram16out, b=ram16out, c=screenout, d=keybout, sel=address[13..14], out=out);
}
